import sys, pygame
from bullet import Bullet
from enemy import Enemy
from enemy_bullet import  Enemy_Bullet
from random import randint
from time import sleep

def check_keydown_events(event, settings, screen, ship, bullets):      #  按下按键

    if event.key == pygame.K_RIGHT:     #  控制移动
        ship.moving_right = True
    elif event.key == pygame.K_LEFT:
        ship.moving_left = True
    elif event.key == pygame.K_ESCAPE:
        sys.exit()

    elif event.key == pygame.K_SPACE:
        new_bullet = Bullet(settings, screen, ship)     #  飞机创建一颗子弹
        bullets.add(new_bullet)                     #  加入到编组之中

def check_keyup_events(event, ship):        #  响应松开

    if event.key == pygame.K_RIGHT:     #  控制移动
        ship.moving_right = False
    elif event.key == pygame.K_LEFT:
        ship.moving_left = False


def check_events(settings, screen, stats, play_button, ship,
                      enemies, bullets, enemy_bullets):

    for event in pygame.event.get():        #  管理事件
        if event.type == pygame.QUIT:   #  退出
            sys.exit()

        elif event.type == pygame.KEYDOWN:
            check_keydown_events(event, settings, screen, ship, bullets)

        elif event.type == pygame.KEYUP:
            check_keyup_events(event, ship)

        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            check_play_button(settings, screen, stats, play_button, ship,
                      enemies, bullets, enemy_bullets, mouse_x, mouse_y)

def check_play_button(settings, screen, stats, play_button, ship,
                      enemies, bullets, enemy_bullets, mouse_x, mouse_y):       #  开始游戏按钮

    if play_button.rect.collidepoint(mouse_x, mouse_y):
        stats.reset_stats()
        stats.game_active = True

        button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)
        if button_clicked and not stats.game_active:        #  将开始游戏按钮切换至非活动状态

            pygame.mouse.set_visible(False)     #  隐藏光标

            enemies.empty()
            bullets.empty()
            enemy_bullets.empty()

            create_fleet(settings, screen, ship, enemies)
            ship.center_ship()

def update_bullets(settings, screen, stats, scoreboard, ship, enemies, bullets):       #  刷新子弹

    bullets.update()

    for bullet in bullets.copy():       # 删除屏幕外的子弹
        if bullet.rect.bottom <= 0:
            bullets.remove(bullet)

    check_bullet_enemies_collisions(settings, screen, stats, scoreboard, ship, enemies, bullets)

def check_bullet_enemies_collisions(settings, screen, stats, scoreboard, ship, enemies, bullets):       #  击中敌机判定

    collisions = pygame.sprite.groupcollide(bullets, enemies, True, True)

    if collisions:      #  计分
        for enemies in collisions.values():
            stats.score += settings.enemy_points * len(enemies)
            scoreboard.prep_score()

    if len(enemies) == 0:       #  敌机被全部清除时刷新
        bullets.empty()
        create_fleet(settings, screen, ship, enemies)

def update_enemies(settings, ship, enemies):

    check_fleet_edges(settings, enemies)
    enemies.update()

    if pygame.sprite.spritecollideany(ship, enemies):       #  敌机碰撞飞机
        print("被击中！！！")

def check_fleet_edges(settings, enemies):       #  碰到边界时改变方向

    for enemy in enemies.sprites():
        if enemy.check_edges():
            change_fleet_direction(settings)
            break

def change_fleet_direction(settings):       #  碰到边界时改变方向

    settings.fleet_direction = -settings.fleet_direction

def get_number_enemies_x(settings, enemy_width):        #  计算每行可容纳多少敌机

    available_space_x = settings.screen_width - 2 * enemy_width
    number_enemies_x = int(available_space_x / (2 * enemy_width))

    return number_enemies_x

def create_enemy(settings, screen, enemies, enemy_number, row_number):      #  创建一个敌机放入当前行

    enemy = Enemy(settings, screen)
    enemy_width = enemy.rect.width
    enemy.x = enemy_width + 2 * enemy_width * enemy_number
    enemy.rect.x = enemy.x
    enemy.rect.y = enemy.rect.height + 4 * enemy.rect.height * row_number       #  设置一行敌机数量
    enemies.add(enemy)

def create_fleet(settings, screen, ship, enemies):      #  创建敌机

    enemy = Enemy(settings, screen)
    number_enemies_x = get_number_enemies_x(settings, enemy.rect.width)
    number_rows = get_number_rows(settings, ship.rect.height, enemy.rect.height)

    for row_number in range(number_rows):
        for enemy_number in range(number_enemies_x):        #  创建第一行的敌机
            create_enemy(settings, screen, enemies, enemy_number, row_number)

def get_number_rows(settings, ship_height, enemy_height):

    available_space_y = (settings.screen_height - (2 * enemy_height) - ship_height)
    numeber_rows = int(available_space_y / (5 * enemy_height))          #  设置敌机行数

    return numeber_rows

def update_enemy_bullet(settings,stats, screen, enemies, lifeboard, bullets,enemy_bullets, ship):      #  敌机子弹

    for enemy in enemies:       #  随机发射
        i = randint(0, 1000)
        if i == 1:
            new_bullet = Enemy_Bullet(settings, screen, enemy)  # 创建一颗子弹
            enemy_bullets.add(new_bullet)

    enemy_bullets.update()

    for bullet in enemy_bullets.copy():  # 删除屏幕外的子弹
        if bullet.rect.top >= 1200:
            enemy_bullets.remove(bullet)

    if pygame.sprite.spritecollideany(ship, enemy_bullets):     #  飞机被攻击判定
        ship_hit(settings, stats, screen, ship, lifeboard, enemies, bullets, enemy_bullets)

def ship_hit(settings, stats, screen, ship, lifeboard, enemies, bullets, enemy_bullets):        #  敌机子弹判定

    if stats.ships_left > 0:        #  扣除飞机生命值
        stats.ships_left -= 1
        stats.life -= 1
        lifeboard.prep_life()

        enemy_bullets.empty()
        ship.center_ship()

    else:
        stats.game_active = False


def update_screen(settings, screen, stats, scoreboard, lifeboard, ship,
                  enemies, bullets, enemy_bullets, paly_button):      #  更新屏幕

    screen.fill(settings.bg_color)

    for bullet in bullets.sprites():        #  绘制所有飞机子弹
        bullet.draw_bullet()
    for enemy_bullet in enemy_bullets.sprites():  # 绘制所有敌机子弹
        enemy_bullet.draw_bullet()

    ship.blitme()       #  刷新飞机位置
    enemies.draw(screen)

    scoreboard.show_score()     #  分数窗口
    lifeboard.show_life()       #  生命值窗口

    if not stats.game_active:
        paly_button.draw_button()

    pygame.display.flip()
